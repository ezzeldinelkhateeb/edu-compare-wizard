#!/usr/bin/env python3
"""
ุงุฎุชุจุงุฑ ุณุฑูุน ูุงุณุชุฎุฑุงุฌ ุงููุต ูู ุงูุตูุฑ ุจุงุณุชุฎุฏุงู Gemini 2.0
Quick Test for Text Extraction from Images using Gemini 2.0
"""

import os
import asyncio
from pathlib import Path

try:
    from PIL import Image
    import google.generativeai as genai
    print("โ ุชู ุชุญููู ููุชุจุงุช Gemini ุจูุฌุงุญ")
except ImportError as e:
    print(f"โ ููุชุจุงุช Gemini ุบูุฑ ูุชููุฑุฉ: {e}")
    print("ูู ุจุชุซุจูุช: pip install google-generativeai pillow")
    exit(1)

async def extract_text_with_gemini(image_path: str, api_key: str) -> dict:
    """ุงุณุชุฎุฑุงุฌ ุงููุต ูู ุงูุตูุฑุฉ ุจุงุณุชุฎุฏุงู Gemini 2.0"""
    
    try:
        # ุชูููู Gemini
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-2.0-flash-exp')
        
        print(f"๐ผ๏ธ ูุนุงูุฌุฉ ุงูุตูุฑุฉ: {Path(image_path).name}")
        
        # ุชุญููู ุงูุตูุฑุฉ
        image = Image.open(image_path)
        
        # ุฅูุดุงุก ุงูุจุฑููุจุช
        prompt = """
        ุงุณุชุฎุฑุฌ ุงููุต ูู ูุฐู ุงูุตูุฑุฉ ุจุฏูุฉ ุนุงููุฉ.
        
        ุงูุชุนูููุงุช:
        1. ุงุณุชุฎุฑุฌ ุฌููุน ุงููุตูุต ุงููุฑุฆูุฉ ูู ุงูุตูุฑุฉ
        2. ุงุญุงูุธ ุนูู ุงูุชูุณูู ุงูุฃุตูู ูููุต
        3. ุฅุฐุง ูุงู ุงููุต ุจุงููุบุฉ ุงูุนุฑุจูุฉุ ุชุฃูุฏ ูู ูุชุงุจุชู ุจุดูู ุตุญูุญ
        4. ุงุญุชูุธ ุจุงูุฃุฑูุงู ูุงูุฑููุฒ ุงูุฑูุงุถูุฉ ููุง ูู
        
        ุฃุนุฏ ุงููุต ุงููุณุชุฎุฑุฌ ููุท ุจุฏูู ุฃู ุชุนูููุงุช ุฅุถุงููุฉ.
        """
        
        # ุงุณุชุฎุฑุงุฌ ุงููุต
        print("๐ค ุฅุฑุณุงู ุงูุตูุฑุฉ ุฅูู Gemini 2.0...")
        response = await asyncio.to_thread(model.generate_content, [prompt, image])
        
        if not response.text:
            return {"success": False, "error": "ูู ูุชู ุงูุญุตูู ุนูู ุงุณุชุฌุงุจุฉ ูู Gemini"}
        
        extracted_text = response.text.strip()
        
        return {
            "success": True,
            "text": extracted_text,
            "character_count": len(extracted_text),
            "word_count": len(extracted_text.split())
        }
        
    except Exception as e:
        return {"success": False, "error": str(e)}

async def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    
    print("๐ ุงุฎุชุจุงุฑ ุณุฑูุน ูุงุณุชุฎุฑุงุฌ ุงููุต ุจุงุณุชุฎุฏุงู Gemini 2.0")
    print("=" * 50)
    
    # ุงูุญุตูู ุนูู ููุชุงุญ API
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("โ GEMINI_API_KEY ุบูุฑ ููุฌูุฏ")
        print("ูู ุจุชุนููู ุงููุชุบูุฑ ุงูุจูุฆู: export GEMINI_API_KEY='your-api-key'")
        return
    
    # ูุณุงุฑุงุช ุงูุตูุฑ
    image_paths = {
        "103.jpg": "D:/ezz/compair/edu-compare-wizard/103.jpg",
        "Scan_0037.jpg": "D:/ezz/compair/edu-compare-wizard/Scan_0037.jpg"
    }
    
    # ูุนุงูุฌุฉ ูู ุตูุฑุฉ
    for image_name, image_path in image_paths.items():
        print(f"\n๐ธ ูุนุงูุฌุฉ: {image_name}")
        print("-" * 30)
        
        if not os.path.exists(image_path):
            print(f"โ ุงูุตูุฑุฉ ุบูุฑ ููุฌูุฏุฉ: {image_path}")
            continue
        
        # ุงุณุชุฎุฑุงุฌ ุงููุต
        result = await extract_text_with_gemini(image_path, api_key)
        
        if result["success"]:
            print(f"โ ุชู ุงุณุชุฎุฑุงุฌ ุงููุต ุจูุฌุงุญ!")
            print(f"๐ ุนุฏุฏ ุงูุฃุญุฑู: {result['character_count']}")
            print(f"๐ ุนุฏุฏ ุงููููุงุช: {result['word_count']}")
            print(f"\n๐ ุงููุต ุงููุณุชุฎุฑุฌ:")
            print("=" * 40)
            print(result["text"])
            print("=" * 40)
        else:
            print(f"โ ูุดู ูู ุงุณุชุฎุฑุงุฌ ุงููุต: {result['error']}")
    
    print(f"\nโ ุงูุชูู ุงูุงุฎุชุจุงุฑ")

if __name__ == "__main__":
    asyncio.run(main()) 